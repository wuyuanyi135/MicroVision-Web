/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.mvcam.AdapterCapability', null, global);
goog.exportSymbol('proto.mvcam.AdapterInfo', null, global);
goog.exportSymbol('proto.mvcam.AvailableAdaptersResponse', null, global);
goog.exportSymbol('proto.mvcam.CameraCapability', null, global);
goog.exportSymbol('proto.mvcam.Configuration', null, global);
goog.exportSymbol('proto.mvcam.ConfigureRequest', null, global);
goog.exportSymbol('proto.mvcam.DeviceControlAction', null, global);
goog.exportSymbol('proto.mvcam.DeviceControlRequest', null, global);
goog.exportSymbol('proto.mvcam.DeviceInfo', null, global);
goog.exportSymbol('proto.mvcam.Frame', null, global);
goog.exportSymbol('proto.mvcam.FrameStream', null, global);
goog.exportSymbol('proto.mvcam.GetDevicesRequest', null, global);
goog.exportSymbol('proto.mvcam.GetDevicesResponse', null, global);
goog.exportSymbol('proto.mvcam.IdRequest', null, global);
goog.exportSymbol('proto.mvcam.Parameter', null, global);
goog.exportSymbol('proto.mvcam.Status', null, global);
goog.exportSymbol('proto.mvcam.StreamingRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcam.AdapterCapability = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcam.AdapterCapability, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcam.AdapterCapability.displayName = 'proto.mvcam.AdapterCapability';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcam.AdapterCapability.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcam.AdapterCapability.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcam.AdapterCapability} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.AdapterCapability.toObject = function(includeInstance, msg) {
  var f, obj = {
    shouldShutDown: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcam.AdapterCapability}
 */
proto.mvcam.AdapterCapability.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcam.AdapterCapability;
  return proto.mvcam.AdapterCapability.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcam.AdapterCapability} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcam.AdapterCapability}
 */
proto.mvcam.AdapterCapability.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShouldShutDown(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcam.AdapterCapability.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcam.AdapterCapability.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcam.AdapterCapability} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.AdapterCapability.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShouldShutDown();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool should_shut_down = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcam.AdapterCapability.prototype.getShouldShutDown = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.mvcam.AdapterCapability.prototype.setShouldShutDown = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcam.AdapterInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcam.AdapterInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcam.AdapterInfo.displayName = 'proto.mvcam.AdapterInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcam.AdapterInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcam.AdapterInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcam.AdapterInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.AdapterInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    inUse: jspb.Message.getFieldWithDefault(msg, 4, false),
    capability: (f = msg.getCapability()) && proto.mvcam.AdapterCapability.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcam.AdapterInfo}
 */
proto.mvcam.AdapterInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcam.AdapterInfo;
  return proto.mvcam.AdapterInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcam.AdapterInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcam.AdapterInfo}
 */
proto.mvcam.AdapterInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInUse(value);
      break;
    case 5:
      var value = new proto.mvcam.AdapterCapability;
      reader.readMessage(value,proto.mvcam.AdapterCapability.deserializeBinaryFromReader);
      msg.setCapability(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcam.AdapterInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcam.AdapterInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcam.AdapterInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.AdapterInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInUse();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getCapability();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.mvcam.AdapterCapability.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.mvcam.AdapterInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mvcam.AdapterInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.mvcam.AdapterInfo.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.mvcam.AdapterInfo.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.mvcam.AdapterInfo.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.mvcam.AdapterInfo.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool in_use = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcam.AdapterInfo.prototype.getInUse = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.mvcam.AdapterInfo.prototype.setInUse = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional AdapterCapability capability = 5;
 * @return {?proto.mvcam.AdapterCapability}
 */
proto.mvcam.AdapterInfo.prototype.getCapability = function() {
  return /** @type{?proto.mvcam.AdapterCapability} */ (
    jspb.Message.getWrapperField(this, proto.mvcam.AdapterCapability, 5));
};


/** @param {?proto.mvcam.AdapterCapability|undefined} value */
proto.mvcam.AdapterInfo.prototype.setCapability = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.mvcam.AdapterInfo.prototype.clearCapability = function() {
  this.setCapability(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mvcam.AdapterInfo.prototype.hasCapability = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcam.AvailableAdaptersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mvcam.AvailableAdaptersResponse.repeatedFields_, null);
};
goog.inherits(proto.mvcam.AvailableAdaptersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcam.AvailableAdaptersResponse.displayName = 'proto.mvcam.AvailableAdaptersResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mvcam.AvailableAdaptersResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcam.AvailableAdaptersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcam.AvailableAdaptersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcam.AvailableAdaptersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.AvailableAdaptersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    adaptersList: jspb.Message.toObjectList(msg.getAdaptersList(),
    proto.mvcam.AdapterInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcam.AvailableAdaptersResponse}
 */
proto.mvcam.AvailableAdaptersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcam.AvailableAdaptersResponse;
  return proto.mvcam.AvailableAdaptersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcam.AvailableAdaptersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcam.AvailableAdaptersResponse}
 */
proto.mvcam.AvailableAdaptersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mvcam.AdapterInfo;
      reader.readMessage(value,proto.mvcam.AdapterInfo.deserializeBinaryFromReader);
      msg.addAdapters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcam.AvailableAdaptersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcam.AvailableAdaptersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcam.AvailableAdaptersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.AvailableAdaptersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAdaptersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mvcam.AdapterInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AdapterInfo adapters = 1;
 * @return {!Array<!proto.mvcam.AdapterInfo>}
 */
proto.mvcam.AvailableAdaptersResponse.prototype.getAdaptersList = function() {
  return /** @type{!Array<!proto.mvcam.AdapterInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mvcam.AdapterInfo, 1));
};


/** @param {!Array<!proto.mvcam.AdapterInfo>} value */
proto.mvcam.AvailableAdaptersResponse.prototype.setAdaptersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mvcam.AdapterInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mvcam.AdapterInfo}
 */
proto.mvcam.AvailableAdaptersResponse.prototype.addAdapters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mvcam.AdapterInfo, opt_index);
};


proto.mvcam.AvailableAdaptersResponse.prototype.clearAdaptersList = function() {
  this.setAdaptersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcam.GetDevicesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcam.GetDevicesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcam.GetDevicesRequest.displayName = 'proto.mvcam.GetDevicesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcam.GetDevicesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcam.GetDevicesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcam.GetDevicesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.GetDevicesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    adapterName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    usecache: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcam.GetDevicesRequest}
 */
proto.mvcam.GetDevicesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcam.GetDevicesRequest;
  return proto.mvcam.GetDevicesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcam.GetDevicesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcam.GetDevicesRequest}
 */
proto.mvcam.GetDevicesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdapterName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUsecache(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcam.GetDevicesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcam.GetDevicesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcam.GetDevicesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.GetDevicesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAdapterName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUsecache();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string adapter_name = 1;
 * @return {string}
 */
proto.mvcam.GetDevicesRequest.prototype.getAdapterName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mvcam.GetDevicesRequest.prototype.setAdapterName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool useCache = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcam.GetDevicesRequest.prototype.getUsecache = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.mvcam.GetDevicesRequest.prototype.setUsecache = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcam.CameraCapability = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcam.CameraCapability, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcam.CameraCapability.displayName = 'proto.mvcam.CameraCapability';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcam.CameraCapability.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcam.CameraCapability.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcam.CameraCapability} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.CameraCapability.toObject = function(includeInstance, msg) {
  var f, obj = {
    canShutdown: jspb.Message.getFieldWithDefault(msg, 1, false),
    canOpen: jspb.Message.getFieldWithDefault(msg, 2, false),
    canCaptureAsync: jspb.Message.getFieldWithDefault(msg, 3, false),
    canCapture: jspb.Message.getFieldWithDefault(msg, 4, false),
    canAdjustExposure: jspb.Message.getFieldWithDefault(msg, 5, false),
    canAdjustGain: jspb.Message.getFieldWithDefault(msg, 6, false),
    canAdjustGamma: jspb.Message.getFieldWithDefault(msg, 7, false),
    canAdjustBlackLevel: jspb.Message.getFieldWithDefault(msg, 8, false),
    canAdjustFrameRate: jspb.Message.getFieldWithDefault(msg, 9, false),
    canSetFrameNumber: jspb.Message.getFieldWithDefault(msg, 10, false),
    canGetTemperature: jspb.Message.getFieldWithDefault(msg, 11, false),
    canSuspend: jspb.Message.getFieldWithDefault(msg, 12, false),
    canReset: jspb.Message.getFieldWithDefault(msg, 13, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcam.CameraCapability}
 */
proto.mvcam.CameraCapability.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcam.CameraCapability;
  return proto.mvcam.CameraCapability.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcam.CameraCapability} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcam.CameraCapability}
 */
proto.mvcam.CameraCapability.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanShutdown(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanOpen(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanCaptureAsync(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanCapture(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanAdjustExposure(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanAdjustGain(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanAdjustGamma(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanAdjustBlackLevel(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanAdjustFrameRate(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanSetFrameNumber(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanGetTemperature(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanSuspend(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanReset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcam.CameraCapability.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcam.CameraCapability.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcam.CameraCapability} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.CameraCapability.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCanShutdown();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getCanOpen();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getCanCaptureAsync();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getCanCapture();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getCanAdjustExposure();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getCanAdjustGain();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getCanAdjustGamma();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getCanAdjustBlackLevel();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getCanAdjustFrameRate();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getCanSetFrameNumber();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getCanGetTemperature();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getCanSuspend();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getCanReset();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
};


/**
 * optional bool can_shutdown = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcam.CameraCapability.prototype.getCanShutdown = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.mvcam.CameraCapability.prototype.setCanShutdown = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool can_open = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcam.CameraCapability.prototype.getCanOpen = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.mvcam.CameraCapability.prototype.setCanOpen = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool can_capture_async = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcam.CameraCapability.prototype.getCanCaptureAsync = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.mvcam.CameraCapability.prototype.setCanCaptureAsync = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool can_capture = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcam.CameraCapability.prototype.getCanCapture = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.mvcam.CameraCapability.prototype.setCanCapture = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool can_adjust_exposure = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcam.CameraCapability.prototype.getCanAdjustExposure = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.mvcam.CameraCapability.prototype.setCanAdjustExposure = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool can_adjust_gain = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcam.CameraCapability.prototype.getCanAdjustGain = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.mvcam.CameraCapability.prototype.setCanAdjustGain = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool can_adjust_gamma = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcam.CameraCapability.prototype.getCanAdjustGamma = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.mvcam.CameraCapability.prototype.setCanAdjustGamma = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool can_adjust_black_level = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcam.CameraCapability.prototype.getCanAdjustBlackLevel = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.mvcam.CameraCapability.prototype.setCanAdjustBlackLevel = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool can_adjust_frame_rate = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcam.CameraCapability.prototype.getCanAdjustFrameRate = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.mvcam.CameraCapability.prototype.setCanAdjustFrameRate = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool can_set_frame_number = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcam.CameraCapability.prototype.getCanSetFrameNumber = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.mvcam.CameraCapability.prototype.setCanSetFrameNumber = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool can_get_temperature = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcam.CameraCapability.prototype.getCanGetTemperature = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.mvcam.CameraCapability.prototype.setCanGetTemperature = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool can_suspend = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcam.CameraCapability.prototype.getCanSuspend = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.mvcam.CameraCapability.prototype.setCanSuspend = function(value) {
  jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool can_reset = 13;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcam.CameraCapability.prototype.getCanReset = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 13, false));
};


/** @param {boolean} value */
proto.mvcam.CameraCapability.prototype.setCanReset = function(value) {
  jspb.Message.setProto3BooleanField(this, 13, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcam.DeviceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcam.DeviceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcam.DeviceInfo.displayName = 'proto.mvcam.DeviceInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcam.DeviceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcam.DeviceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcam.DeviceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.DeviceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    adapter: (f = msg.getAdapter()) && proto.mvcam.AdapterInfo.toObject(includeInstance, f),
    manufacture: jspb.Message.getFieldWithDefault(msg, 2, ""),
    id: jspb.Message.getFieldWithDefault(msg, 3, ""),
    model: jspb.Message.getFieldWithDefault(msg, 4, ""),
    version: jspb.Message.getFieldWithDefault(msg, 5, ""),
    serial: jspb.Message.getFieldWithDefault(msg, 6, ""),
    capabilities: (f = msg.getCapabilities()) && proto.mvcam.CameraCapability.toObject(includeInstance, f),
    connected: jspb.Message.getFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcam.DeviceInfo}
 */
proto.mvcam.DeviceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcam.DeviceInfo;
  return proto.mvcam.DeviceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcam.DeviceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcam.DeviceInfo}
 */
proto.mvcam.DeviceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mvcam.AdapterInfo;
      reader.readMessage(value,proto.mvcam.AdapterInfo.deserializeBinaryFromReader);
      msg.setAdapter(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setManufacture(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSerial(value);
      break;
    case 7:
      var value = new proto.mvcam.CameraCapability;
      reader.readMessage(value,proto.mvcam.CameraCapability.deserializeBinaryFromReader);
      msg.setCapabilities(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnected(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcam.DeviceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcam.DeviceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcam.DeviceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.DeviceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAdapter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mvcam.AdapterInfo.serializeBinaryToWriter
    );
  }
  f = message.getManufacture();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getModel();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSerial();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCapabilities();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.mvcam.CameraCapability.serializeBinaryToWriter
    );
  }
  f = message.getConnected();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional AdapterInfo adapter = 1;
 * @return {?proto.mvcam.AdapterInfo}
 */
proto.mvcam.DeviceInfo.prototype.getAdapter = function() {
  return /** @type{?proto.mvcam.AdapterInfo} */ (
    jspb.Message.getWrapperField(this, proto.mvcam.AdapterInfo, 1));
};


/** @param {?proto.mvcam.AdapterInfo|undefined} value */
proto.mvcam.DeviceInfo.prototype.setAdapter = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.mvcam.DeviceInfo.prototype.clearAdapter = function() {
  this.setAdapter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mvcam.DeviceInfo.prototype.hasAdapter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string manufacture = 2;
 * @return {string}
 */
proto.mvcam.DeviceInfo.prototype.getManufacture = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.mvcam.DeviceInfo.prototype.setManufacture = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string id = 3;
 * @return {string}
 */
proto.mvcam.DeviceInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.mvcam.DeviceInfo.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string model = 4;
 * @return {string}
 */
proto.mvcam.DeviceInfo.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.mvcam.DeviceInfo.prototype.setModel = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string version = 5;
 * @return {string}
 */
proto.mvcam.DeviceInfo.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.mvcam.DeviceInfo.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string serial = 6;
 * @return {string}
 */
proto.mvcam.DeviceInfo.prototype.getSerial = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.mvcam.DeviceInfo.prototype.setSerial = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional CameraCapability capabilities = 7;
 * @return {?proto.mvcam.CameraCapability}
 */
proto.mvcam.DeviceInfo.prototype.getCapabilities = function() {
  return /** @type{?proto.mvcam.CameraCapability} */ (
    jspb.Message.getWrapperField(this, proto.mvcam.CameraCapability, 7));
};


/** @param {?proto.mvcam.CameraCapability|undefined} value */
proto.mvcam.DeviceInfo.prototype.setCapabilities = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.mvcam.DeviceInfo.prototype.clearCapabilities = function() {
  this.setCapabilities(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mvcam.DeviceInfo.prototype.hasCapabilities = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool connected = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcam.DeviceInfo.prototype.getConnected = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.mvcam.DeviceInfo.prototype.setConnected = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcam.GetDevicesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mvcam.GetDevicesResponse.repeatedFields_, null);
};
goog.inherits(proto.mvcam.GetDevicesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcam.GetDevicesResponse.displayName = 'proto.mvcam.GetDevicesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mvcam.GetDevicesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcam.GetDevicesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcam.GetDevicesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcam.GetDevicesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.GetDevicesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicesList: jspb.Message.toObjectList(msg.getDevicesList(),
    proto.mvcam.DeviceInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcam.GetDevicesResponse}
 */
proto.mvcam.GetDevicesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcam.GetDevicesResponse;
  return proto.mvcam.GetDevicesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcam.GetDevicesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcam.GetDevicesResponse}
 */
proto.mvcam.GetDevicesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mvcam.DeviceInfo;
      reader.readMessage(value,proto.mvcam.DeviceInfo.deserializeBinaryFromReader);
      msg.addDevices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcam.GetDevicesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcam.GetDevicesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcam.GetDevicesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.GetDevicesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mvcam.DeviceInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DeviceInfo devices = 1;
 * @return {!Array<!proto.mvcam.DeviceInfo>}
 */
proto.mvcam.GetDevicesResponse.prototype.getDevicesList = function() {
  return /** @type{!Array<!proto.mvcam.DeviceInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mvcam.DeviceInfo, 1));
};


/** @param {!Array<!proto.mvcam.DeviceInfo>} value */
proto.mvcam.GetDevicesResponse.prototype.setDevicesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mvcam.DeviceInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mvcam.DeviceInfo}
 */
proto.mvcam.GetDevicesResponse.prototype.addDevices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mvcam.DeviceInfo, opt_index);
};


proto.mvcam.GetDevicesResponse.prototype.clearDevicesList = function() {
  this.setDevicesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcam.IdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcam.IdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcam.IdRequest.displayName = 'proto.mvcam.IdRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcam.IdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcam.IdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcam.IdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.IdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcam.IdRequest}
 */
proto.mvcam.IdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcam.IdRequest;
  return proto.mvcam.IdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcam.IdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcam.IdRequest}
 */
proto.mvcam.IdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcam.IdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcam.IdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcam.IdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.IdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.mvcam.IdRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mvcam.IdRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcam.Parameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcam.Parameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcam.Parameter.displayName = 'proto.mvcam.Parameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcam.Parameter.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcam.Parameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcam.Parameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.Parameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    shouldUpdate: jspb.Message.getFieldWithDefault(msg, 1, false),
    value: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcam.Parameter}
 */
proto.mvcam.Parameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcam.Parameter;
  return proto.mvcam.Parameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcam.Parameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcam.Parameter}
 */
proto.mvcam.Parameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShouldUpdate(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcam.Parameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcam.Parameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcam.Parameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.Parameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShouldUpdate();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional bool should_update = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcam.Parameter.prototype.getShouldUpdate = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.mvcam.Parameter.prototype.setShouldUpdate = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional double _value = 2;
 * @return {number}
 */
proto.mvcam.Parameter.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.mvcam.Parameter.prototype.setValue = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcam.Configuration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcam.Configuration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcam.Configuration.displayName = 'proto.mvcam.Configuration';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcam.Configuration.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcam.Configuration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcam.Configuration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.Configuration.toObject = function(includeInstance, msg) {
  var f, obj = {
    exposure: (f = msg.getExposure()) && proto.mvcam.Parameter.toObject(includeInstance, f),
    frameRate: (f = msg.getFrameRate()) && proto.mvcam.Parameter.toObject(includeInstance, f),
    gain: (f = msg.getGain()) && proto.mvcam.Parameter.toObject(includeInstance, f),
    blackLevel: (f = msg.getBlackLevel()) && proto.mvcam.Parameter.toObject(includeInstance, f),
    gamma: (f = msg.getGamma()) && proto.mvcam.Parameter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcam.Configuration}
 */
proto.mvcam.Configuration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcam.Configuration;
  return proto.mvcam.Configuration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcam.Configuration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcam.Configuration}
 */
proto.mvcam.Configuration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mvcam.Parameter;
      reader.readMessage(value,proto.mvcam.Parameter.deserializeBinaryFromReader);
      msg.setExposure(value);
      break;
    case 2:
      var value = new proto.mvcam.Parameter;
      reader.readMessage(value,proto.mvcam.Parameter.deserializeBinaryFromReader);
      msg.setFrameRate(value);
      break;
    case 3:
      var value = new proto.mvcam.Parameter;
      reader.readMessage(value,proto.mvcam.Parameter.deserializeBinaryFromReader);
      msg.setGain(value);
      break;
    case 4:
      var value = new proto.mvcam.Parameter;
      reader.readMessage(value,proto.mvcam.Parameter.deserializeBinaryFromReader);
      msg.setBlackLevel(value);
      break;
    case 5:
      var value = new proto.mvcam.Parameter;
      reader.readMessage(value,proto.mvcam.Parameter.deserializeBinaryFromReader);
      msg.setGamma(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcam.Configuration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcam.Configuration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcam.Configuration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.Configuration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExposure();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mvcam.Parameter.serializeBinaryToWriter
    );
  }
  f = message.getFrameRate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mvcam.Parameter.serializeBinaryToWriter
    );
  }
  f = message.getGain();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.mvcam.Parameter.serializeBinaryToWriter
    );
  }
  f = message.getBlackLevel();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.mvcam.Parameter.serializeBinaryToWriter
    );
  }
  f = message.getGamma();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.mvcam.Parameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional Parameter exposure = 1;
 * @return {?proto.mvcam.Parameter}
 */
proto.mvcam.Configuration.prototype.getExposure = function() {
  return /** @type{?proto.mvcam.Parameter} */ (
    jspb.Message.getWrapperField(this, proto.mvcam.Parameter, 1));
};


/** @param {?proto.mvcam.Parameter|undefined} value */
proto.mvcam.Configuration.prototype.setExposure = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.mvcam.Configuration.prototype.clearExposure = function() {
  this.setExposure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mvcam.Configuration.prototype.hasExposure = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Parameter frame_rate = 2;
 * @return {?proto.mvcam.Parameter}
 */
proto.mvcam.Configuration.prototype.getFrameRate = function() {
  return /** @type{?proto.mvcam.Parameter} */ (
    jspb.Message.getWrapperField(this, proto.mvcam.Parameter, 2));
};


/** @param {?proto.mvcam.Parameter|undefined} value */
proto.mvcam.Configuration.prototype.setFrameRate = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.mvcam.Configuration.prototype.clearFrameRate = function() {
  this.setFrameRate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mvcam.Configuration.prototype.hasFrameRate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Parameter gain = 3;
 * @return {?proto.mvcam.Parameter}
 */
proto.mvcam.Configuration.prototype.getGain = function() {
  return /** @type{?proto.mvcam.Parameter} */ (
    jspb.Message.getWrapperField(this, proto.mvcam.Parameter, 3));
};


/** @param {?proto.mvcam.Parameter|undefined} value */
proto.mvcam.Configuration.prototype.setGain = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.mvcam.Configuration.prototype.clearGain = function() {
  this.setGain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mvcam.Configuration.prototype.hasGain = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Parameter black_level = 4;
 * @return {?proto.mvcam.Parameter}
 */
proto.mvcam.Configuration.prototype.getBlackLevel = function() {
  return /** @type{?proto.mvcam.Parameter} */ (
    jspb.Message.getWrapperField(this, proto.mvcam.Parameter, 4));
};


/** @param {?proto.mvcam.Parameter|undefined} value */
proto.mvcam.Configuration.prototype.setBlackLevel = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.mvcam.Configuration.prototype.clearBlackLevel = function() {
  this.setBlackLevel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mvcam.Configuration.prototype.hasBlackLevel = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Parameter gamma = 5;
 * @return {?proto.mvcam.Parameter}
 */
proto.mvcam.Configuration.prototype.getGamma = function() {
  return /** @type{?proto.mvcam.Parameter} */ (
    jspb.Message.getWrapperField(this, proto.mvcam.Parameter, 5));
};


/** @param {?proto.mvcam.Parameter|undefined} value */
proto.mvcam.Configuration.prototype.setGamma = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.mvcam.Configuration.prototype.clearGamma = function() {
  this.setGamma(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mvcam.Configuration.prototype.hasGamma = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcam.ConfigureRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcam.ConfigureRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcam.ConfigureRequest.displayName = 'proto.mvcam.ConfigureRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcam.ConfigureRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcam.ConfigureRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcam.ConfigureRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.ConfigureRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.mvcam.IdRequest.toObject(includeInstance, f),
    config: (f = msg.getConfig()) && proto.mvcam.Configuration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcam.ConfigureRequest}
 */
proto.mvcam.ConfigureRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcam.ConfigureRequest;
  return proto.mvcam.ConfigureRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcam.ConfigureRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcam.ConfigureRequest}
 */
proto.mvcam.ConfigureRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mvcam.IdRequest;
      reader.readMessage(value,proto.mvcam.IdRequest.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.mvcam.Configuration;
      reader.readMessage(value,proto.mvcam.Configuration.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcam.ConfigureRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcam.ConfigureRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcam.ConfigureRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.ConfigureRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mvcam.IdRequest.serializeBinaryToWriter
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mvcam.Configuration.serializeBinaryToWriter
    );
  }
};


/**
 * optional IdRequest id = 1;
 * @return {?proto.mvcam.IdRequest}
 */
proto.mvcam.ConfigureRequest.prototype.getId = function() {
  return /** @type{?proto.mvcam.IdRequest} */ (
    jspb.Message.getWrapperField(this, proto.mvcam.IdRequest, 1));
};


/** @param {?proto.mvcam.IdRequest|undefined} value */
proto.mvcam.ConfigureRequest.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.mvcam.ConfigureRequest.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mvcam.ConfigureRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Configuration config = 2;
 * @return {?proto.mvcam.Configuration}
 */
proto.mvcam.ConfigureRequest.prototype.getConfig = function() {
  return /** @type{?proto.mvcam.Configuration} */ (
    jspb.Message.getWrapperField(this, proto.mvcam.Configuration, 2));
};


/** @param {?proto.mvcam.Configuration|undefined} value */
proto.mvcam.ConfigureRequest.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.mvcam.ConfigureRequest.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mvcam.ConfigureRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcam.Frame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcam.Frame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcam.Frame.displayName = 'proto.mvcam.Frame';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcam.Frame.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcam.Frame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcam.Frame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.Frame.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    size: jspb.Message.getFieldWithDefault(msg, 3, 0),
    height: jspb.Message.getFieldWithDefault(msg, 4, 0),
    width: jspb.Message.getFieldWithDefault(msg, 5, 0),
    pixelFormat: jspb.Message.getFieldWithDefault(msg, 6, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcam.Frame}
 */
proto.mvcam.Frame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcam.Frame;
  return proto.mvcam.Frame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcam.Frame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcam.Frame}
 */
proto.mvcam.Frame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPixelFormat(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcam.Frame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcam.Frame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcam.Frame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.Frame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getPixelFormat();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp timestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.mvcam.Frame.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.mvcam.Frame.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.mvcam.Frame.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mvcam.Frame.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 id = 2;
 * @return {number}
 */
proto.mvcam.Frame.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.mvcam.Frame.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 size = 3;
 * @return {number}
 */
proto.mvcam.Frame.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.mvcam.Frame.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 height = 4;
 * @return {number}
 */
proto.mvcam.Frame.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.mvcam.Frame.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 width = 5;
 * @return {number}
 */
proto.mvcam.Frame.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.mvcam.Frame.prototype.setWidth = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 pixel_format = 6;
 * @return {number}
 */
proto.mvcam.Frame.prototype.getPixelFormat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.mvcam.Frame.prototype.setPixelFormat = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bytes data = 7;
 * @return {!(string|Uint8Array)}
 */
proto.mvcam.Frame.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes data = 7;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.mvcam.Frame.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.mvcam.Frame.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.mvcam.Frame.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcam.FrameStream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mvcam.FrameStream.repeatedFields_, null);
};
goog.inherits(proto.mvcam.FrameStream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcam.FrameStream.displayName = 'proto.mvcam.FrameStream';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mvcam.FrameStream.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcam.FrameStream.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcam.FrameStream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcam.FrameStream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.FrameStream.toObject = function(includeInstance, msg) {
  var f, obj = {
    framesList: jspb.Message.toObjectList(msg.getFramesList(),
    proto.mvcam.Frame.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcam.FrameStream}
 */
proto.mvcam.FrameStream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcam.FrameStream;
  return proto.mvcam.FrameStream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcam.FrameStream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcam.FrameStream}
 */
proto.mvcam.FrameStream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mvcam.Frame;
      reader.readMessage(value,proto.mvcam.Frame.deserializeBinaryFromReader);
      msg.addFrames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcam.FrameStream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcam.FrameStream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcam.FrameStream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.FrameStream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFramesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mvcam.Frame.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Frame frames = 1;
 * @return {!Array<!proto.mvcam.Frame>}
 */
proto.mvcam.FrameStream.prototype.getFramesList = function() {
  return /** @type{!Array<!proto.mvcam.Frame>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mvcam.Frame, 1));
};


/** @param {!Array<!proto.mvcam.Frame>} value */
proto.mvcam.FrameStream.prototype.setFramesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mvcam.Frame=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mvcam.Frame}
 */
proto.mvcam.FrameStream.prototype.addFrames = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mvcam.Frame, opt_index);
};


proto.mvcam.FrameStream.prototype.clearFramesList = function() {
  this.setFramesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcam.StreamingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcam.StreamingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcam.StreamingRequest.displayName = 'proto.mvcam.StreamingRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcam.StreamingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcam.StreamingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcam.StreamingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.StreamingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.mvcam.IdRequest.toObject(includeInstance, f),
    numberFrames: jspb.Message.getFieldWithDefault(msg, 2, 0),
    batchSize: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcam.StreamingRequest}
 */
proto.mvcam.StreamingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcam.StreamingRequest;
  return proto.mvcam.StreamingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcam.StreamingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcam.StreamingRequest}
 */
proto.mvcam.StreamingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mvcam.IdRequest;
      reader.readMessage(value,proto.mvcam.IdRequest.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumberFrames(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBatchSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcam.StreamingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcam.StreamingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcam.StreamingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.StreamingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mvcam.IdRequest.serializeBinaryToWriter
    );
  }
  f = message.getNumberFrames();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getBatchSize();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional IdRequest id = 1;
 * @return {?proto.mvcam.IdRequest}
 */
proto.mvcam.StreamingRequest.prototype.getId = function() {
  return /** @type{?proto.mvcam.IdRequest} */ (
    jspb.Message.getWrapperField(this, proto.mvcam.IdRequest, 1));
};


/** @param {?proto.mvcam.IdRequest|undefined} value */
proto.mvcam.StreamingRequest.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.mvcam.StreamingRequest.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mvcam.StreamingRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 number_frames = 2;
 * @return {number}
 */
proto.mvcam.StreamingRequest.prototype.getNumberFrames = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.mvcam.StreamingRequest.prototype.setNumberFrames = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 batch_size = 4;
 * @return {number}
 */
proto.mvcam.StreamingRequest.prototype.getBatchSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.mvcam.StreamingRequest.prototype.setBatchSize = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcam.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcam.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcam.Status.displayName = 'proto.mvcam.Status';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcam.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcam.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcam.Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    temperature: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    opened: jspb.Message.getFieldWithDefault(msg, 2, false),
    capturing: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcam.Status}
 */
proto.mvcam.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcam.Status;
  return proto.mvcam.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcam.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcam.Status}
 */
proto.mvcam.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTemperature(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOpened(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCapturing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcam.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcam.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcam.Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemperature();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getOpened();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getCapturing();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional double temperature = 1;
 * @return {number}
 */
proto.mvcam.Status.prototype.getTemperature = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.mvcam.Status.prototype.setTemperature = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional bool opened = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcam.Status.prototype.getOpened = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.mvcam.Status.prototype.setOpened = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool capturing = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcam.Status.prototype.getCapturing = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.mvcam.Status.prototype.setCapturing = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcam.DeviceControlRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcam.DeviceControlRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcam.DeviceControlRequest.displayName = 'proto.mvcam.DeviceControlRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcam.DeviceControlRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcam.DeviceControlRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcam.DeviceControlRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.DeviceControlRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.mvcam.IdRequest.toObject(includeInstance, f),
    action: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcam.DeviceControlRequest}
 */
proto.mvcam.DeviceControlRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcam.DeviceControlRequest;
  return proto.mvcam.DeviceControlRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcam.DeviceControlRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcam.DeviceControlRequest}
 */
proto.mvcam.DeviceControlRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mvcam.IdRequest;
      reader.readMessage(value,proto.mvcam.IdRequest.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.mvcam.DeviceControlAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcam.DeviceControlRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcam.DeviceControlRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcam.DeviceControlRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcam.DeviceControlRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mvcam.IdRequest.serializeBinaryToWriter
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional IdRequest id = 1;
 * @return {?proto.mvcam.IdRequest}
 */
proto.mvcam.DeviceControlRequest.prototype.getId = function() {
  return /** @type{?proto.mvcam.IdRequest} */ (
    jspb.Message.getWrapperField(this, proto.mvcam.IdRequest, 1));
};


/** @param {?proto.mvcam.IdRequest|undefined} value */
proto.mvcam.DeviceControlRequest.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.mvcam.DeviceControlRequest.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mvcam.DeviceControlRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DeviceControlAction action = 2;
 * @return {!proto.mvcam.DeviceControlAction}
 */
proto.mvcam.DeviceControlRequest.prototype.getAction = function() {
  return /** @type {!proto.mvcam.DeviceControlAction} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.mvcam.DeviceControlAction} value */
proto.mvcam.DeviceControlRequest.prototype.setAction = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.mvcam.DeviceControlAction = {
  SUSPEND: 0,
  RESUME: 1
};

goog.object.extend(exports, proto.mvcam);
