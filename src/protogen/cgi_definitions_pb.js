/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var camera_controller_definitions_pb = require('./camera_controller_definitions_pb.js');
var camera_definitions_pb = require('./camera_definitions_pb.js');
goog.exportSymbol('proto.mvcgi.ConnectDevicesRequest', null, global);
goog.exportSymbol('proto.mvcgi.ConnectDevicesRequest.CameraConnection', null, global);
goog.exportSymbol('proto.mvcgi.ConnectDevicesRequest.ControllerConnection', null, global);
goog.exportSymbol('proto.mvcgi.ConnectDevicesResponse', null, global);
goog.exportSymbol('proto.mvcgi.ConnectionAction', null, global);
goog.exportSymbol('proto.mvcgi.ConnectionStatus', null, global);
goog.exportSymbol('proto.mvcgi.GetVersionRequest', null, global);
goog.exportSymbol('proto.mvcgi.GetVersionResponse', null, global);
goog.exportSymbol('proto.mvcgi.ListDevicesRequest', null, global);
goog.exportSymbol('proto.mvcgi.ListDevicesResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcgi.GetVersionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcgi.GetVersionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcgi.GetVersionRequest.displayName = 'proto.mvcgi.GetVersionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcgi.GetVersionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcgi.GetVersionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcgi.GetVersionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcgi.GetVersionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcgi.GetVersionRequest}
 */
proto.mvcgi.GetVersionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcgi.GetVersionRequest;
  return proto.mvcgi.GetVersionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcgi.GetVersionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcgi.GetVersionRequest}
 */
proto.mvcgi.GetVersionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcgi.GetVersionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcgi.GetVersionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcgi.GetVersionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcgi.GetVersionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcgi.GetVersionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcgi.GetVersionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcgi.GetVersionResponse.displayName = 'proto.mvcgi.GetVersionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcgi.GetVersionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcgi.GetVersionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcgi.GetVersionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcgi.GetVersionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcgi.GetVersionResponse}
 */
proto.mvcgi.GetVersionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcgi.GetVersionResponse;
  return proto.mvcgi.GetVersionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcgi.GetVersionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcgi.GetVersionResponse}
 */
proto.mvcgi.GetVersionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcgi.GetVersionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcgi.GetVersionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcgi.GetVersionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcgi.GetVersionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.mvcgi.GetVersionResponse.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mvcgi.GetVersionResponse.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcgi.ListDevicesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcgi.ListDevicesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcgi.ListDevicesRequest.displayName = 'proto.mvcgi.ListDevicesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcgi.ListDevicesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcgi.ListDevicesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcgi.ListDevicesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcgi.ListDevicesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    controllerUrl: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cameraUrl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    useCache: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcgi.ListDevicesRequest}
 */
proto.mvcgi.ListDevicesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcgi.ListDevicesRequest;
  return proto.mvcgi.ListDevicesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcgi.ListDevicesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcgi.ListDevicesRequest}
 */
proto.mvcgi.ListDevicesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setControllerUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCameraUrl(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseCache(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcgi.ListDevicesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcgi.ListDevicesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcgi.ListDevicesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcgi.ListDevicesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getControllerUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCameraUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUseCache();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string controller_url = 1;
 * @return {string}
 */
proto.mvcgi.ListDevicesRequest.prototype.getControllerUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mvcgi.ListDevicesRequest.prototype.setControllerUrl = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string camera_url = 2;
 * @return {string}
 */
proto.mvcgi.ListDevicesRequest.prototype.getCameraUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.mvcgi.ListDevicesRequest.prototype.setCameraUrl = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool use_cache = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcgi.ListDevicesRequest.prototype.getUseCache = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.mvcgi.ListDevicesRequest.prototype.setUseCache = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcgi.ListDevicesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mvcgi.ListDevicesResponse.repeatedFields_, null);
};
goog.inherits(proto.mvcgi.ListDevicesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcgi.ListDevicesResponse.displayName = 'proto.mvcgi.ListDevicesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mvcgi.ListDevicesResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcgi.ListDevicesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcgi.ListDevicesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcgi.ListDevicesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcgi.ListDevicesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    controllerList: jspb.Message.toObjectList(msg.getControllerList(),
    camera_controller_definitions_pb.SerialDeviceMapping.toObject, includeInstance),
    devicesList: jspb.Message.toObjectList(msg.getDevicesList(),
    camera_definitions_pb.DeviceInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcgi.ListDevicesResponse}
 */
proto.mvcgi.ListDevicesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcgi.ListDevicesResponse;
  return proto.mvcgi.ListDevicesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcgi.ListDevicesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcgi.ListDevicesResponse}
 */
proto.mvcgi.ListDevicesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new camera_controller_definitions_pb.SerialDeviceMapping;
      reader.readMessage(value,camera_controller_definitions_pb.SerialDeviceMapping.deserializeBinaryFromReader);
      msg.addController(value);
      break;
    case 2:
      var value = new camera_definitions_pb.DeviceInfo;
      reader.readMessage(value,camera_definitions_pb.DeviceInfo.deserializeBinaryFromReader);
      msg.addDevices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcgi.ListDevicesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcgi.ListDevicesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcgi.ListDevicesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcgi.ListDevicesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getControllerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      camera_controller_definitions_pb.SerialDeviceMapping.serializeBinaryToWriter
    );
  }
  f = message.getDevicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      camera_definitions_pb.DeviceInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated mvcamctrl.SerialDeviceMapping controller = 1;
 * @return {!Array<!proto.mvcamctrl.SerialDeviceMapping>}
 */
proto.mvcgi.ListDevicesResponse.prototype.getControllerList = function() {
  return /** @type{!Array<!proto.mvcamctrl.SerialDeviceMapping>} */ (
    jspb.Message.getRepeatedWrapperField(this, camera_controller_definitions_pb.SerialDeviceMapping, 1));
};


/** @param {!Array<!proto.mvcamctrl.SerialDeviceMapping>} value */
proto.mvcgi.ListDevicesResponse.prototype.setControllerList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mvcamctrl.SerialDeviceMapping=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mvcamctrl.SerialDeviceMapping}
 */
proto.mvcgi.ListDevicesResponse.prototype.addController = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mvcamctrl.SerialDeviceMapping, opt_index);
};


proto.mvcgi.ListDevicesResponse.prototype.clearControllerList = function() {
  this.setControllerList([]);
};


/**
 * repeated mvcam.DeviceInfo devices = 2;
 * @return {!Array<!proto.mvcam.DeviceInfo>}
 */
proto.mvcgi.ListDevicesResponse.prototype.getDevicesList = function() {
  return /** @type{!Array<!proto.mvcam.DeviceInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, camera_definitions_pb.DeviceInfo, 2));
};


/** @param {!Array<!proto.mvcam.DeviceInfo>} value */
proto.mvcgi.ListDevicesResponse.prototype.setDevicesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.mvcam.DeviceInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mvcam.DeviceInfo}
 */
proto.mvcgi.ListDevicesResponse.prototype.addDevices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.mvcam.DeviceInfo, opt_index);
};


proto.mvcgi.ListDevicesResponse.prototype.clearDevicesList = function() {
  this.setDevicesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcgi.ConnectDevicesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcgi.ConnectDevicesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcgi.ConnectDevicesRequest.displayName = 'proto.mvcgi.ConnectDevicesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcgi.ConnectDevicesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcgi.ConnectDevicesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcgi.ConnectDevicesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcgi.ConnectDevicesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    controllerConnection: (f = msg.getControllerConnection()) && proto.mvcgi.ConnectDevicesRequest.ControllerConnection.toObject(includeInstance, f),
    cameraConnection: (f = msg.getCameraConnection()) && proto.mvcgi.ConnectDevicesRequest.CameraConnection.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcgi.ConnectDevicesRequest}
 */
proto.mvcgi.ConnectDevicesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcgi.ConnectDevicesRequest;
  return proto.mvcgi.ConnectDevicesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcgi.ConnectDevicesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcgi.ConnectDevicesRequest}
 */
proto.mvcgi.ConnectDevicesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mvcgi.ConnectDevicesRequest.ControllerConnection;
      reader.readMessage(value,proto.mvcgi.ConnectDevicesRequest.ControllerConnection.deserializeBinaryFromReader);
      msg.setControllerConnection(value);
      break;
    case 2:
      var value = new proto.mvcgi.ConnectDevicesRequest.CameraConnection;
      reader.readMessage(value,proto.mvcgi.ConnectDevicesRequest.CameraConnection.deserializeBinaryFromReader);
      msg.setCameraConnection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcgi.ConnectDevicesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcgi.ConnectDevicesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcgi.ConnectDevicesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcgi.ConnectDevicesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getControllerConnection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mvcgi.ConnectDevicesRequest.ControllerConnection.serializeBinaryToWriter
    );
  }
  f = message.getCameraConnection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mvcgi.ConnectDevicesRequest.CameraConnection.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcgi.ConnectDevicesRequest.ControllerConnection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcgi.ConnectDevicesRequest.ControllerConnection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcgi.ConnectDevicesRequest.ControllerConnection.displayName = 'proto.mvcgi.ConnectDevicesRequest.ControllerConnection';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcgi.ConnectDevicesRequest.ControllerConnection.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcgi.ConnectDevicesRequest.ControllerConnection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcgi.ConnectDevicesRequest.ControllerConnection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcgi.ConnectDevicesRequest.ControllerConnection.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, 0),
    connectionInfo: (f = msg.getConnectionInfo()) && camera_controller_definitions_pb.ConnectRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcgi.ConnectDevicesRequest.ControllerConnection}
 */
proto.mvcgi.ConnectDevicesRequest.ControllerConnection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcgi.ConnectDevicesRequest.ControllerConnection;
  return proto.mvcgi.ConnectDevicesRequest.ControllerConnection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcgi.ConnectDevicesRequest.ControllerConnection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcgi.ConnectDevicesRequest.ControllerConnection}
 */
proto.mvcgi.ConnectDevicesRequest.ControllerConnection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mvcgi.ConnectionAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 2:
      var value = new camera_controller_definitions_pb.ConnectRequest;
      reader.readMessage(value,camera_controller_definitions_pb.ConnectRequest.deserializeBinaryFromReader);
      msg.setConnectionInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcgi.ConnectDevicesRequest.ControllerConnection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcgi.ConnectDevicesRequest.ControllerConnection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcgi.ConnectDevicesRequest.ControllerConnection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcgi.ConnectDevicesRequest.ControllerConnection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getConnectionInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      camera_controller_definitions_pb.ConnectRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConnectionAction action = 1;
 * @return {!proto.mvcgi.ConnectionAction}
 */
proto.mvcgi.ConnectDevicesRequest.ControllerConnection.prototype.getAction = function() {
  return /** @type {!proto.mvcgi.ConnectionAction} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.mvcgi.ConnectionAction} value */
proto.mvcgi.ConnectDevicesRequest.ControllerConnection.prototype.setAction = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional mvcamctrl.ConnectRequest connection_info = 2;
 * @return {?proto.mvcamctrl.ConnectRequest}
 */
proto.mvcgi.ConnectDevicesRequest.ControllerConnection.prototype.getConnectionInfo = function() {
  return /** @type{?proto.mvcamctrl.ConnectRequest} */ (
    jspb.Message.getWrapperField(this, camera_controller_definitions_pb.ConnectRequest, 2));
};


/** @param {?proto.mvcamctrl.ConnectRequest|undefined} value */
proto.mvcgi.ConnectDevicesRequest.ControllerConnection.prototype.setConnectionInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.mvcgi.ConnectDevicesRequest.ControllerConnection.prototype.clearConnectionInfo = function() {
  this.setConnectionInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mvcgi.ConnectDevicesRequest.ControllerConnection.prototype.hasConnectionInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcgi.ConnectDevicesRequest.CameraConnection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcgi.ConnectDevicesRequest.CameraConnection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcgi.ConnectDevicesRequest.CameraConnection.displayName = 'proto.mvcgi.ConnectDevicesRequest.CameraConnection';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcgi.ConnectDevicesRequest.CameraConnection.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcgi.ConnectDevicesRequest.CameraConnection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcgi.ConnectDevicesRequest.CameraConnection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcgi.ConnectDevicesRequest.CameraConnection.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, 0),
    connectionInfo: (f = msg.getConnectionInfo()) && camera_definitions_pb.IdRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcgi.ConnectDevicesRequest.CameraConnection}
 */
proto.mvcgi.ConnectDevicesRequest.CameraConnection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcgi.ConnectDevicesRequest.CameraConnection;
  return proto.mvcgi.ConnectDevicesRequest.CameraConnection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcgi.ConnectDevicesRequest.CameraConnection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcgi.ConnectDevicesRequest.CameraConnection}
 */
proto.mvcgi.ConnectDevicesRequest.CameraConnection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mvcgi.ConnectionAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 2:
      var value = new camera_definitions_pb.IdRequest;
      reader.readMessage(value,camera_definitions_pb.IdRequest.deserializeBinaryFromReader);
      msg.setConnectionInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcgi.ConnectDevicesRequest.CameraConnection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcgi.ConnectDevicesRequest.CameraConnection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcgi.ConnectDevicesRequest.CameraConnection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcgi.ConnectDevicesRequest.CameraConnection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getConnectionInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      camera_definitions_pb.IdRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConnectionAction action = 1;
 * @return {!proto.mvcgi.ConnectionAction}
 */
proto.mvcgi.ConnectDevicesRequest.CameraConnection.prototype.getAction = function() {
  return /** @type {!proto.mvcgi.ConnectionAction} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.mvcgi.ConnectionAction} value */
proto.mvcgi.ConnectDevicesRequest.CameraConnection.prototype.setAction = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional mvcam.IdRequest connection_info = 2;
 * @return {?proto.mvcam.IdRequest}
 */
proto.mvcgi.ConnectDevicesRequest.CameraConnection.prototype.getConnectionInfo = function() {
  return /** @type{?proto.mvcam.IdRequest} */ (
    jspb.Message.getWrapperField(this, camera_definitions_pb.IdRequest, 2));
};


/** @param {?proto.mvcam.IdRequest|undefined} value */
proto.mvcgi.ConnectDevicesRequest.CameraConnection.prototype.setConnectionInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.mvcgi.ConnectDevicesRequest.CameraConnection.prototype.clearConnectionInfo = function() {
  this.setConnectionInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mvcgi.ConnectDevicesRequest.CameraConnection.prototype.hasConnectionInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ControllerConnection controller_connection = 1;
 * @return {?proto.mvcgi.ConnectDevicesRequest.ControllerConnection}
 */
proto.mvcgi.ConnectDevicesRequest.prototype.getControllerConnection = function() {
  return /** @type{?proto.mvcgi.ConnectDevicesRequest.ControllerConnection} */ (
    jspb.Message.getWrapperField(this, proto.mvcgi.ConnectDevicesRequest.ControllerConnection, 1));
};


/** @param {?proto.mvcgi.ConnectDevicesRequest.ControllerConnection|undefined} value */
proto.mvcgi.ConnectDevicesRequest.prototype.setControllerConnection = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.mvcgi.ConnectDevicesRequest.prototype.clearControllerConnection = function() {
  this.setControllerConnection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mvcgi.ConnectDevicesRequest.prototype.hasControllerConnection = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CameraConnection camera_connection = 2;
 * @return {?proto.mvcgi.ConnectDevicesRequest.CameraConnection}
 */
proto.mvcgi.ConnectDevicesRequest.prototype.getCameraConnection = function() {
  return /** @type{?proto.mvcgi.ConnectDevicesRequest.CameraConnection} */ (
    jspb.Message.getWrapperField(this, proto.mvcgi.ConnectDevicesRequest.CameraConnection, 2));
};


/** @param {?proto.mvcgi.ConnectDevicesRequest.CameraConnection|undefined} value */
proto.mvcgi.ConnectDevicesRequest.prototype.setCameraConnection = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.mvcgi.ConnectDevicesRequest.prototype.clearCameraConnection = function() {
  this.setCameraConnection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mvcgi.ConnectDevicesRequest.prototype.hasCameraConnection = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcgi.ConnectDevicesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcgi.ConnectDevicesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcgi.ConnectDevicesResponse.displayName = 'proto.mvcgi.ConnectDevicesResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcgi.ConnectDevicesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcgi.ConnectDevicesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcgi.ConnectDevicesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcgi.ConnectDevicesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcgi.ConnectDevicesResponse}
 */
proto.mvcgi.ConnectDevicesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcgi.ConnectDevicesResponse;
  return proto.mvcgi.ConnectDevicesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcgi.ConnectDevicesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcgi.ConnectDevicesResponse}
 */
proto.mvcgi.ConnectDevicesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcgi.ConnectDevicesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcgi.ConnectDevicesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcgi.ConnectDevicesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcgi.ConnectDevicesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.mvcgi.ConnectionAction = {
  NO_OP: 0,
  CONNECT: 1,
  DISCONNECT: 2
};

/**
 * @enum {number}
 */
proto.mvcgi.ConnectionStatus = {
  CONNECTED: 0,
  DISCONNECTED: 1
};

goog.object.extend(exports, proto.mvcgi);
