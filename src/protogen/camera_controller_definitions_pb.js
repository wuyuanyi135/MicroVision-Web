/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.mvcamctrl.ConnectRequest', null, global);
goog.exportSymbol('proto.mvcamctrl.ControlLaserRequest', null, global);
goog.exportSymbol('proto.mvcamctrl.DeviceVersionResponse', null, global);
goog.exportSymbol('proto.mvcamctrl.DriverVersionResponse', null, global);
goog.exportSymbol('proto.mvcamctrl.GetSerialDevicesRequest', null, global);
goog.exportSymbol('proto.mvcamctrl.LaserConfiguration', null, global);
goog.exportSymbol('proto.mvcamctrl.PowerConfiguration', null, global);
goog.exportSymbol('proto.mvcamctrl.SerialDeviceMapping', null, global);
goog.exportSymbol('proto.mvcamctrl.SerialListResponse', null, global);
goog.exportSymbol('proto.mvcamctrl.SetLaserRequest', null, global);
goog.exportSymbol('proto.mvcamctrl.SetPowerRequest', null, global);
goog.exportSymbol('proto.mvcamctrl.Status', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcamctrl.SerialDeviceMapping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcamctrl.SerialDeviceMapping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcamctrl.SerialDeviceMapping.displayName = 'proto.mvcamctrl.SerialDeviceMapping';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcamctrl.SerialDeviceMapping.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcamctrl.SerialDeviceMapping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcamctrl.SerialDeviceMapping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcamctrl.SerialDeviceMapping.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    destination: jspb.Message.getFieldWithDefault(msg, 2, ""),
    connected: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcamctrl.SerialDeviceMapping}
 */
proto.mvcamctrl.SerialDeviceMapping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcamctrl.SerialDeviceMapping;
  return proto.mvcamctrl.SerialDeviceMapping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcamctrl.SerialDeviceMapping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcamctrl.SerialDeviceMapping}
 */
proto.mvcamctrl.SerialDeviceMapping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestination(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnected(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcamctrl.SerialDeviceMapping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcamctrl.SerialDeviceMapping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcamctrl.SerialDeviceMapping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcamctrl.SerialDeviceMapping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDestination();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConnected();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.mvcamctrl.SerialDeviceMapping.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mvcamctrl.SerialDeviceMapping.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string destination = 2;
 * @return {string}
 */
proto.mvcamctrl.SerialDeviceMapping.prototype.getDestination = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.mvcamctrl.SerialDeviceMapping.prototype.setDestination = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool connected = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcamctrl.SerialDeviceMapping.prototype.getConnected = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.mvcamctrl.SerialDeviceMapping.prototype.setConnected = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcamctrl.SerialListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mvcamctrl.SerialListResponse.repeatedFields_, null);
};
goog.inherits(proto.mvcamctrl.SerialListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcamctrl.SerialListResponse.displayName = 'proto.mvcamctrl.SerialListResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mvcamctrl.SerialListResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcamctrl.SerialListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcamctrl.SerialListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcamctrl.SerialListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcamctrl.SerialListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceListList: jspb.Message.toObjectList(msg.getDeviceListList(),
    proto.mvcamctrl.SerialDeviceMapping.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcamctrl.SerialListResponse}
 */
proto.mvcamctrl.SerialListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcamctrl.SerialListResponse;
  return proto.mvcamctrl.SerialListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcamctrl.SerialListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcamctrl.SerialListResponse}
 */
proto.mvcamctrl.SerialListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.mvcamctrl.SerialDeviceMapping;
      reader.readMessage(value,proto.mvcamctrl.SerialDeviceMapping.deserializeBinaryFromReader);
      msg.addDeviceList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcamctrl.SerialListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcamctrl.SerialListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcamctrl.SerialListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcamctrl.SerialListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.mvcamctrl.SerialDeviceMapping.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SerialDeviceMapping device_list = 2;
 * @return {!Array<!proto.mvcamctrl.SerialDeviceMapping>}
 */
proto.mvcamctrl.SerialListResponse.prototype.getDeviceListList = function() {
  return /** @type{!Array<!proto.mvcamctrl.SerialDeviceMapping>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mvcamctrl.SerialDeviceMapping, 2));
};


/** @param {!Array<!proto.mvcamctrl.SerialDeviceMapping>} value */
proto.mvcamctrl.SerialListResponse.prototype.setDeviceListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.mvcamctrl.SerialDeviceMapping=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mvcamctrl.SerialDeviceMapping}
 */
proto.mvcamctrl.SerialListResponse.prototype.addDeviceList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.mvcamctrl.SerialDeviceMapping, opt_index);
};


proto.mvcamctrl.SerialListResponse.prototype.clearDeviceListList = function() {
  this.setDeviceListList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcamctrl.GetSerialDevicesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcamctrl.GetSerialDevicesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcamctrl.GetSerialDevicesRequest.displayName = 'proto.mvcamctrl.GetSerialDevicesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcamctrl.GetSerialDevicesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcamctrl.GetSerialDevicesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcamctrl.GetSerialDevicesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcamctrl.GetSerialDevicesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    usecache: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcamctrl.GetSerialDevicesRequest}
 */
proto.mvcamctrl.GetSerialDevicesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcamctrl.GetSerialDevicesRequest;
  return proto.mvcamctrl.GetSerialDevicesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcamctrl.GetSerialDevicesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcamctrl.GetSerialDevicesRequest}
 */
proto.mvcamctrl.GetSerialDevicesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUsecache(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcamctrl.GetSerialDevicesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcamctrl.GetSerialDevicesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcamctrl.GetSerialDevicesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcamctrl.GetSerialDevicesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsecache();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool useCache = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcamctrl.GetSerialDevicesRequest.prototype.getUsecache = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.mvcamctrl.GetSerialDevicesRequest.prototype.setUsecache = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcamctrl.ConnectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.mvcamctrl.ConnectRequest.oneofGroups_);
};
goog.inherits(proto.mvcamctrl.ConnectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcamctrl.ConnectRequest.displayName = 'proto.mvcamctrl.ConnectRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' _value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last _value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.mvcamctrl.ConnectRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.mvcamctrl.ConnectRequest.DeviceIdentifierCase = {
  DEVICE_IDENTIFIER_NOT_SET: 0,
  NAME: 1,
  PATH: 2
};

/**
 * @return {proto.mvcamctrl.ConnectRequest.DeviceIdentifierCase}
 */
proto.mvcamctrl.ConnectRequest.prototype.getDeviceIdentifierCase = function() {
  return /** @type {proto.mvcamctrl.ConnectRequest.DeviceIdentifierCase} */(jspb.Message.computeOneofCase(this, proto.mvcamctrl.ConnectRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcamctrl.ConnectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcamctrl.ConnectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcamctrl.ConnectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcamctrl.ConnectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    path: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcamctrl.ConnectRequest}
 */
proto.mvcamctrl.ConnectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcamctrl.ConnectRequest;
  return proto.mvcamctrl.ConnectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcamctrl.ConnectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcamctrl.ConnectRequest}
 */
proto.mvcamctrl.ConnectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcamctrl.ConnectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcamctrl.ConnectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcamctrl.ConnectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcamctrl.ConnectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.mvcamctrl.ConnectRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mvcamctrl.ConnectRequest.prototype.setName = function(value) {
  jspb.Message.setOneofField(this, 1, proto.mvcamctrl.ConnectRequest.oneofGroups_[0], value);
};


proto.mvcamctrl.ConnectRequest.prototype.clearName = function() {
  jspb.Message.setOneofField(this, 1, proto.mvcamctrl.ConnectRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mvcamctrl.ConnectRequest.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.mvcamctrl.ConnectRequest.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.mvcamctrl.ConnectRequest.prototype.setPath = function(value) {
  jspb.Message.setOneofField(this, 2, proto.mvcamctrl.ConnectRequest.oneofGroups_[0], value);
};


proto.mvcamctrl.ConnectRequest.prototype.clearPath = function() {
  jspb.Message.setOneofField(this, 2, proto.mvcamctrl.ConnectRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mvcamctrl.ConnectRequest.prototype.hasPath = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcamctrl.DriverVersionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcamctrl.DriverVersionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcamctrl.DriverVersionResponse.displayName = 'proto.mvcamctrl.DriverVersionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcamctrl.DriverVersionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcamctrl.DriverVersionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcamctrl.DriverVersionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcamctrl.DriverVersionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcamctrl.DriverVersionResponse}
 */
proto.mvcamctrl.DriverVersionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcamctrl.DriverVersionResponse;
  return proto.mvcamctrl.DriverVersionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcamctrl.DriverVersionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcamctrl.DriverVersionResponse}
 */
proto.mvcamctrl.DriverVersionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcamctrl.DriverVersionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcamctrl.DriverVersionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcamctrl.DriverVersionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcamctrl.DriverVersionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.mvcamctrl.DriverVersionResponse.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.mvcamctrl.DriverVersionResponse.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcamctrl.DeviceVersionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcamctrl.DeviceVersionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcamctrl.DeviceVersionResponse.displayName = 'proto.mvcamctrl.DeviceVersionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcamctrl.DeviceVersionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcamctrl.DeviceVersionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcamctrl.DeviceVersionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcamctrl.DeviceVersionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    hardwareVersion: jspb.Message.getFieldWithDefault(msg, 2, 0),
    firmwareVersion: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcamctrl.DeviceVersionResponse}
 */
proto.mvcamctrl.DeviceVersionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcamctrl.DeviceVersionResponse;
  return proto.mvcamctrl.DeviceVersionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcamctrl.DeviceVersionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcamctrl.DeviceVersionResponse}
 */
proto.mvcamctrl.DeviceVersionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHardwareVersion(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFirmwareVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcamctrl.DeviceVersionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcamctrl.DeviceVersionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcamctrl.DeviceVersionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcamctrl.DeviceVersionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHardwareVersion();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getFirmwareVersion();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 hardware_version = 2;
 * @return {number}
 */
proto.mvcamctrl.DeviceVersionResponse.prototype.getHardwareVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.mvcamctrl.DeviceVersionResponse.prototype.setHardwareVersion = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 firmware_version = 3;
 * @return {number}
 */
proto.mvcamctrl.DeviceVersionResponse.prototype.getFirmwareVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.mvcamctrl.DeviceVersionResponse.prototype.setFirmwareVersion = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcamctrl.PowerConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcamctrl.PowerConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcamctrl.PowerConfiguration.displayName = 'proto.mvcamctrl.PowerConfiguration';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcamctrl.PowerConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcamctrl.PowerConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcamctrl.PowerConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcamctrl.PowerConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    masterPower: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcamctrl.PowerConfiguration}
 */
proto.mvcamctrl.PowerConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcamctrl.PowerConfiguration;
  return proto.mvcamctrl.PowerConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcamctrl.PowerConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcamctrl.PowerConfiguration}
 */
proto.mvcamctrl.PowerConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMasterPower(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcamctrl.PowerConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcamctrl.PowerConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcamctrl.PowerConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcamctrl.PowerConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMasterPower();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool master_power = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcamctrl.PowerConfiguration.prototype.getMasterPower = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.mvcamctrl.PowerConfiguration.prototype.setMasterPower = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcamctrl.SetPowerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcamctrl.SetPowerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcamctrl.SetPowerRequest.displayName = 'proto.mvcamctrl.SetPowerRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcamctrl.SetPowerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcamctrl.SetPowerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcamctrl.SetPowerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcamctrl.SetPowerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    power: (f = msg.getPower()) && proto.mvcamctrl.PowerConfiguration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcamctrl.SetPowerRequest}
 */
proto.mvcamctrl.SetPowerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcamctrl.SetPowerRequest;
  return proto.mvcamctrl.SetPowerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcamctrl.SetPowerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcamctrl.SetPowerRequest}
 */
proto.mvcamctrl.SetPowerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.mvcamctrl.PowerConfiguration;
      reader.readMessage(value,proto.mvcamctrl.PowerConfiguration.deserializeBinaryFromReader);
      msg.setPower(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcamctrl.SetPowerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcamctrl.SetPowerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcamctrl.SetPowerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcamctrl.SetPowerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPower();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mvcamctrl.PowerConfiguration.serializeBinaryToWriter
    );
  }
};


/**
 * optional PowerConfiguration power = 2;
 * @return {?proto.mvcamctrl.PowerConfiguration}
 */
proto.mvcamctrl.SetPowerRequest.prototype.getPower = function() {
  return /** @type{?proto.mvcamctrl.PowerConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.mvcamctrl.PowerConfiguration, 2));
};


/** @param {?proto.mvcamctrl.PowerConfiguration|undefined} value */
proto.mvcamctrl.SetPowerRequest.prototype.setPower = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.mvcamctrl.SetPowerRequest.prototype.clearPower = function() {
  this.setPower(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mvcamctrl.SetPowerRequest.prototype.hasPower = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcamctrl.LaserConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcamctrl.LaserConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcamctrl.LaserConfiguration.displayName = 'proto.mvcamctrl.LaserConfiguration';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcamctrl.LaserConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcamctrl.LaserConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcamctrl.LaserConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcamctrl.LaserConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    exposureTick: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pulseDelay: jspb.Message.getFieldWithDefault(msg, 2, 0),
    digitalFilter: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcamctrl.LaserConfiguration}
 */
proto.mvcamctrl.LaserConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcamctrl.LaserConfiguration;
  return proto.mvcamctrl.LaserConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcamctrl.LaserConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcamctrl.LaserConfiguration}
 */
proto.mvcamctrl.LaserConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExposureTick(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPulseDelay(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDigitalFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcamctrl.LaserConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcamctrl.LaserConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcamctrl.LaserConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcamctrl.LaserConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExposureTick();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPulseDelay();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDigitalFilter();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 exposure_tick = 1;
 * @return {number}
 */
proto.mvcamctrl.LaserConfiguration.prototype.getExposureTick = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mvcamctrl.LaserConfiguration.prototype.setExposureTick = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 pulse_delay = 2;
 * @return {number}
 */
proto.mvcamctrl.LaserConfiguration.prototype.getPulseDelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.mvcamctrl.LaserConfiguration.prototype.setPulseDelay = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 digital_filter = 3;
 * @return {number}
 */
proto.mvcamctrl.LaserConfiguration.prototype.getDigitalFilter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.mvcamctrl.LaserConfiguration.prototype.setDigitalFilter = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcamctrl.SetLaserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcamctrl.SetLaserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcamctrl.SetLaserRequest.displayName = 'proto.mvcamctrl.SetLaserRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcamctrl.SetLaserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcamctrl.SetLaserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcamctrl.SetLaserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcamctrl.SetLaserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    laser: (f = msg.getLaser()) && proto.mvcamctrl.LaserConfiguration.toObject(includeInstance, f),
    commit: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcamctrl.SetLaserRequest}
 */
proto.mvcamctrl.SetLaserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcamctrl.SetLaserRequest;
  return proto.mvcamctrl.SetLaserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcamctrl.SetLaserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcamctrl.SetLaserRequest}
 */
proto.mvcamctrl.SetLaserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.mvcamctrl.LaserConfiguration;
      reader.readMessage(value,proto.mvcamctrl.LaserConfiguration.deserializeBinaryFromReader);
      msg.setLaser(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCommit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcamctrl.SetLaserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcamctrl.SetLaserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcamctrl.SetLaserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcamctrl.SetLaserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLaser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mvcamctrl.LaserConfiguration.serializeBinaryToWriter
    );
  }
  f = message.getCommit();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional LaserConfiguration laser = 2;
 * @return {?proto.mvcamctrl.LaserConfiguration}
 */
proto.mvcamctrl.SetLaserRequest.prototype.getLaser = function() {
  return /** @type{?proto.mvcamctrl.LaserConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.mvcamctrl.LaserConfiguration, 2));
};


/** @param {?proto.mvcamctrl.LaserConfiguration|undefined} value */
proto.mvcamctrl.SetLaserRequest.prototype.setLaser = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.mvcamctrl.SetLaserRequest.prototype.clearLaser = function() {
  this.setLaser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mvcamctrl.SetLaserRequest.prototype.hasLaser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool commit = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcamctrl.SetLaserRequest.prototype.getCommit = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.mvcamctrl.SetLaserRequest.prototype.setCommit = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcamctrl.ControlLaserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcamctrl.ControlLaserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcamctrl.ControlLaserRequest.displayName = 'proto.mvcamctrl.ControlLaserRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcamctrl.ControlLaserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcamctrl.ControlLaserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcamctrl.ControlLaserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcamctrl.ControlLaserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    enable: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcamctrl.ControlLaserRequest}
 */
proto.mvcamctrl.ControlLaserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcamctrl.ControlLaserRequest;
  return proto.mvcamctrl.ControlLaserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcamctrl.ControlLaserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcamctrl.ControlLaserRequest}
 */
proto.mvcamctrl.ControlLaserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcamctrl.ControlLaserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcamctrl.ControlLaserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcamctrl.ControlLaserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcamctrl.ControlLaserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnable();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool enable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcamctrl.ControlLaserRequest.prototype.getEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.mvcamctrl.ControlLaserRequest.prototype.setEnable = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mvcamctrl.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mvcamctrl.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mvcamctrl.Status.displayName = 'proto.mvcamctrl.Status';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mvcamctrl.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.mvcamctrl.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mvcamctrl.Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcamctrl.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    laserState: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mvcamctrl.Status}
 */
proto.mvcamctrl.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mvcamctrl.Status;
  return proto.mvcamctrl.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mvcamctrl.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mvcamctrl.Status}
 */
proto.mvcamctrl.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLaserState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mvcamctrl.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mvcamctrl.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mvcamctrl.Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mvcamctrl.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLaserState();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool laser_state = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mvcamctrl.Status.prototype.getLaserState = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.mvcamctrl.Status.prototype.setLaserState = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


goog.object.extend(exports, proto.mvcamctrl);
